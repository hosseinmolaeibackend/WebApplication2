// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.context;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication2.Models.Catalog.SliderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionSlider")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImageSlider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TitleSlider")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("UrlSlider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SliderModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment.CommentProductModel", b =>
                {
                    b.Property<int>("CommentProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentProductId"));

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductModelProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelUserId")
                        .HasColumnType("int");

                    b.HasKey("CommentProductId");

                    b.HasIndex("ProductModelProductId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("CommentProductModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment.CommentQsModel", b =>
                {
                    b.Property<int>("CommentQsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentQsId"));

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatTimeComment")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionModelQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelUserId")
                        .HasColumnType("int");

                    b.HasKey("CommentQsId");

                    b.HasIndex("QuestionModelQuestionId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("CommentQsModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment.CommentTractModel", b =>
                {
                    b.Property<int>("CommentTractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentTractId"));

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatTimeComment")
                        .HasColumnType("datetime2");

                    b.Property<int>("TractId")
                        .HasColumnType("int");

                    b.Property<int>("TractModelTractId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelUserId")
                        .HasColumnType("int");

                    b.HasKey("CommentTractId");

                    b.HasIndex("TractModelTractId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("CommentTractModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Faqs.QuestionModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("DesQs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleQs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelUserId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("QuestionModels");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeProductCommentModel", b =>
                {
                    b.Property<int>("LikeCommentProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeCommentProductId"));

                    b.Property<int>("CommentProductId")
                        .HasColumnType("int");

                    b.Property<int>("CommentProductModelCommentProductId")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.HasKey("LikeCommentProductId");

                    b.HasIndex("CommentProductModelCommentProductId");

                    b.ToTable("LikeProductCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeProductModel", b =>
                {
                    b.Property<int>("LikeProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeProductId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductModelProductId")
                        .HasColumnType("int");

                    b.HasKey("LikeProductId");

                    b.HasIndex("ProductModelProductId");

                    b.ToTable("LikeProductModels");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeProductReplyCommentModel", b =>
                {
                    b.Property<int>("LikeProductReplyCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeProductReplyCommentId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyProductCommentId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyProductCommentModelReplyProductCommentId")
                        .HasColumnType("int");

                    b.HasKey("LikeProductReplyCommentId");

                    b.HasIndex("ReplyProductCommentModelReplyProductCommentId");

                    b.ToTable("LikeProductReplyCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeQsCommentModel", b =>
                {
                    b.Property<int>("LikeQsCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeQsCommentId"));

                    b.Property<int>("CommentQsId")
                        .HasColumnType("int");

                    b.Property<int>("CommentQsModelCommentQsId")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.HasKey("LikeQsCommentId");

                    b.HasIndex("CommentQsModelCommentQsId");

                    b.ToTable("LikeQsCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeQsModel", b =>
                {
                    b.Property<int>("LikeQsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeQsId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionModelQuestionId")
                        .HasColumnType("int");

                    b.HasKey("LikeQsId");

                    b.HasIndex("QuestionModelQuestionId");

                    b.ToTable("LikeQsModels");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeQsReplyCommentModel", b =>
                {
                    b.Property<int>("LikeQsCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeQsCommentId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyQsCommentId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyQsCommentModelReplyQsCommentId")
                        .HasColumnType("int");

                    b.HasKey("LikeQsCommentId");

                    b.HasIndex("ReplyQsCommentModelReplyQsCommentId");

                    b.ToTable("LikeQsReplyCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeReplyTractCommentModel", b =>
                {
                    b.Property<int>("LikeReplyTractCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeReplyTractCommentId"));

                    b.Property<int>("LikeReplyCommentCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyTractCommentId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyTractCommentModelReplyTractCommentId")
                        .HasColumnType("int");

                    b.HasKey("LikeReplyTractCommentId");

                    b.HasIndex("ReplyTractCommentModelReplyTractCommentId");

                    b.ToTable("LikeReplyTractCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeTractCommentModel", b =>
                {
                    b.Property<int>("LikeTractCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeTractCommentId"));

                    b.Property<int>("CommentLikeCount")
                        .HasColumnType("int");

                    b.Property<int>("CommentTractId")
                        .HasColumnType("int");

                    b.Property<int>("CommentTractModelCommentTractId")
                        .HasColumnType("int");

                    b.HasKey("LikeTractCommentId");

                    b.HasIndex("CommentTractModelCommentTractId");

                    b.ToTable("LikeTractCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeTractModel", b =>
                {
                    b.Property<int>("LikeTractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeTractId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("TractId")
                        .HasColumnType("int");

                    b.Property<int>("TractModelTractId")
                        .HasColumnType("int");

                    b.HasKey("LikeTractId");

                    b.HasIndex("TractModelTractId");

                    b.ToTable("LikeTractModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Product.ProductGalleriesModel", b =>
                {
                    b.Property<int>("ProductGalleriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductGalleriesId"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductModelProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductGalleriesId");

                    b.HasIndex("ProductModelProductId");

                    b.ToTable("ProductGalleriesModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Product.ProductModel", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductCreat")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductModels");
                });

            modelBuilder.Entity("WebApplication2.Models.ReplyComment.ReplyProductCommentModel", b =>
                {
                    b.Property<int>("ReplyProductCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyProductCommentId"));

                    b.Property<int>("CommentProductId")
                        .HasColumnType("int");

                    b.Property<int>("CommentProductModelCommentProductId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyCommentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelUserId")
                        .HasColumnType("int");

                    b.HasKey("ReplyProductCommentId");

                    b.HasIndex("CommentProductModelCommentProductId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("ReplyProductCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.ReplyComment.ReplyQsCommentModel", b =>
                {
                    b.Property<int>("ReplyQsCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyQsCommentId"));

                    b.Property<int>("CommentQsId")
                        .HasColumnType("int");

                    b.Property<int>("CommentQsModelCommentQsId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyBodyComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelUserId")
                        .HasColumnType("int");

                    b.HasKey("ReplyQsCommentId");

                    b.HasIndex("CommentQsModelCommentQsId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("ReplyQsCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.ReplyComment.ReplyTractCommentModel", b =>
                {
                    b.Property<int>("ReplyTractCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyTractCommentId"));

                    b.Property<int>("CommentTractId")
                        .HasColumnType("int");

                    b.Property<int>("CommentTractModelCommentTractId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyBodyComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelUserId")
                        .HasColumnType("int");

                    b.HasKey("ReplyTractCommentId");

                    b.HasIndex("CommentTractModelCommentTractId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("ReplyTractCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.TagsAndHashtage.TageInterfaceModel", b =>
                {
                    b.Property<int>("TageInterfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TageInterfaceId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductModelProductId")
                        .HasColumnType("int");

                    b.Property<int>("TageId")
                        .HasColumnType("int");

                    b.Property<int>("TageModelTageId")
                        .HasColumnType("int");

                    b.Property<int>("TractId")
                        .HasColumnType("int");

                    b.Property<int>("TractModelTractId")
                        .HasColumnType("int");

                    b.HasKey("TageInterfaceId");

                    b.HasIndex("ProductModelProductId");

                    b.HasIndex("TageModelTageId");

                    b.HasIndex("TractModelTractId");

                    b.ToTable("TageInterfaceModels");
                });

            modelBuilder.Entity("WebApplication2.Models.TagsAndHashtage.TageModel", b =>
                {
                    b.Property<int>("TageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TageId"));

                    b.Property<string>("TageBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TageId");

                    b.ToTable("TageModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Tract.TractModel", b =>
                {
                    b.Property<int>("TractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TractId"));

                    b.Property<DateTime>("CreateTract")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeReadTract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelsUserId")
                        .HasColumnType("int");

                    b.HasKey("TractId");

                    b.HasIndex("UserModelsUserId");

                    b.ToTable("TractModels");
                });

            modelBuilder.Entity("WebApplication2.Models.User.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("UserId");

                    b.ToTable("UserModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment.CommentProductModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Product.ProductModel", "ProductModel")
                        .WithMany("CommentProductModels")
                        .HasForeignKey("ProductModelProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User.UserModel", "UserModel")
                        .WithMany("CommentProductModels")
                        .HasForeignKey("UserModelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment.CommentQsModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Faqs.QuestionModel", "QuestionModel")
                        .WithMany("CommentQsModels")
                        .HasForeignKey("QuestionModelQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User.UserModel", "UserModel")
                        .WithMany("CommentQsModels")
                        .HasForeignKey("UserModelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment.CommentTractModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Tract.TractModel", "TractModel")
                        .WithMany("CommentTractModels")
                        .HasForeignKey("TractModelTractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User.UserModel", "UserModel")
                        .WithMany("CommentTractModels")
                        .HasForeignKey("UserModelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TractModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WebApplication2.Models.Faqs.QuestionModel", b =>
                {
                    b.HasOne("WebApplication2.Models.User.UserModel", "UserModel")
                        .WithMany("QuestionModels")
                        .HasForeignKey("UserModelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeProductCommentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Comment.CommentProductModel", "CommentProductModel")
                        .WithMany("LikeCommentProductModels")
                        .HasForeignKey("CommentProductModelCommentProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentProductModel");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeProductModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Product.ProductModel", "ProductModel")
                        .WithMany("LikeProductModels")
                        .HasForeignKey("ProductModelProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeProductReplyCommentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.ReplyComment.ReplyProductCommentModel", "ReplyProductCommentModel")
                        .WithMany("LikeProductReplyCommentModels")
                        .HasForeignKey("ReplyProductCommentModelReplyProductCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyProductCommentModel");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeQsCommentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Comment.CommentQsModel", "CommentQsModel")
                        .WithMany("LikeQsCommentModels")
                        .HasForeignKey("CommentQsModelCommentQsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentQsModel");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeQsModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Faqs.QuestionModel", "QuestionModel")
                        .WithMany("LikeQsModels")
                        .HasForeignKey("QuestionModelQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionModel");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeQsReplyCommentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.ReplyComment.ReplyQsCommentModel", "ReplyQsCommentModel")
                        .WithMany("LikeQsReplyCommentModels")
                        .HasForeignKey("ReplyQsCommentModelReplyQsCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyQsCommentModel");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeReplyTractCommentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.ReplyComment.ReplyTractCommentModel", "ReplyTractCommentModel")
                        .WithMany("LikeReplyTractCommentModels")
                        .HasForeignKey("ReplyTractCommentModelReplyTractCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyTractCommentModel");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeTractCommentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Comment.CommentTractModel", "CommentTractModel")
                        .WithMany("LikeTractCommentModels")
                        .HasForeignKey("CommentTractModelCommentTractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentTractModel");
                });

            modelBuilder.Entity("WebApplication2.Models.LikeAndDislike.LikeTractModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Tract.TractModel", "TractModel")
                        .WithMany("LikeTractModels")
                        .HasForeignKey("TractModelTractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TractModel");
                });

            modelBuilder.Entity("WebApplication2.Models.Product.ProductGalleriesModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Product.ProductModel", "ProductModel")
                        .WithMany("ProductGalleriesModels")
                        .HasForeignKey("ProductModelProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("WebApplication2.Models.ReplyComment.ReplyProductCommentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Comment.CommentProductModel", "CommentProductModel")
                        .WithMany("ReplyProductCommentModels")
                        .HasForeignKey("CommentProductModelCommentProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User.UserModel", "UserModel")
                        .WithMany("ReplyProductCommentModels")
                        .HasForeignKey("UserModelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentProductModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WebApplication2.Models.ReplyComment.ReplyQsCommentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Comment.CommentQsModel", "CommentQsModel")
                        .WithMany("ReplyQsCommentModels")
                        .HasForeignKey("CommentQsModelCommentQsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User.UserModel", "UserModel")
                        .WithMany("ReplyQsCommentModels")
                        .HasForeignKey("UserModelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentQsModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WebApplication2.Models.ReplyComment.ReplyTractCommentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Comment.CommentTractModel", "CommentTractModel")
                        .WithMany("ReplyTractCommentModels")
                        .HasForeignKey("CommentTractModelCommentTractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User.UserModel", "UserModel")
                        .WithMany("ReplyTractCommentModels")
                        .HasForeignKey("UserModelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentTractModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WebApplication2.Models.TagsAndHashtage.TageInterfaceModel", b =>
                {
                    b.HasOne("WebApplication2.Models.Product.ProductModel", "ProductModel")
                        .WithMany("TageInterfaces")
                        .HasForeignKey("ProductModelProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.TagsAndHashtage.TageModel", "TageModel")
                        .WithMany("TageInterfaces")
                        .HasForeignKey("TageModelTageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Tract.TractModel", "TractModel")
                        .WithMany("TageInterfaces")
                        .HasForeignKey("TractModelTractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductModel");

                    b.Navigation("TageModel");

                    b.Navigation("TractModel");
                });

            modelBuilder.Entity("WebApplication2.Models.Tract.TractModel", b =>
                {
                    b.HasOne("WebApplication2.Models.User.UserModel", "UserModels")
                        .WithMany("TractModels")
                        .HasForeignKey("UserModelsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment.CommentProductModel", b =>
                {
                    b.Navigation("LikeCommentProductModels");

                    b.Navigation("ReplyProductCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment.CommentQsModel", b =>
                {
                    b.Navigation("LikeQsCommentModels");

                    b.Navigation("ReplyQsCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment.CommentTractModel", b =>
                {
                    b.Navigation("LikeTractCommentModels");

                    b.Navigation("ReplyTractCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Faqs.QuestionModel", b =>
                {
                    b.Navigation("CommentQsModels");

                    b.Navigation("LikeQsModels");
                });

            modelBuilder.Entity("WebApplication2.Models.Product.ProductModel", b =>
                {
                    b.Navigation("CommentProductModels");

                    b.Navigation("LikeProductModels");

                    b.Navigation("ProductGalleriesModels");

                    b.Navigation("TageInterfaces");
                });

            modelBuilder.Entity("WebApplication2.Models.ReplyComment.ReplyProductCommentModel", b =>
                {
                    b.Navigation("LikeProductReplyCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.ReplyComment.ReplyQsCommentModel", b =>
                {
                    b.Navigation("LikeQsReplyCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.ReplyComment.ReplyTractCommentModel", b =>
                {
                    b.Navigation("LikeReplyTractCommentModels");
                });

            modelBuilder.Entity("WebApplication2.Models.TagsAndHashtage.TageModel", b =>
                {
                    b.Navigation("TageInterfaces");
                });

            modelBuilder.Entity("WebApplication2.Models.Tract.TractModel", b =>
                {
                    b.Navigation("CommentTractModels");

                    b.Navigation("LikeTractModels");

                    b.Navigation("TageInterfaces");
                });

            modelBuilder.Entity("WebApplication2.Models.User.UserModel", b =>
                {
                    b.Navigation("CommentProductModels");

                    b.Navigation("CommentQsModels");

                    b.Navigation("CommentTractModels");

                    b.Navigation("QuestionModels");

                    b.Navigation("ReplyProductCommentModels");

                    b.Navigation("ReplyQsCommentModels");

                    b.Navigation("ReplyTractCommentModels");

                    b.Navigation("TractModels");
                });
#pragma warning restore 612, 618
        }
    }
}
